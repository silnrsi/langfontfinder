#!/usr/bin/env python3

import argparse
import os
import xml.etree.ElementTree as et
from langfontfinder import LFF
from sldr.ldml import iterate_files


datadir = os.getenv('LFFPATH', os.path.join(os.path.dirname(__file__), '..', 'testdata'))
rulesfile = os.getenv('LFFRULES', os.path.join(datadir, 'fontrules.json'))
familiesfile = os.getenv('LFFFONTS', os.path.join(datadir, 'families.json'))
ltfile = os.getenv('LFFLANGTAGS', os.path.join(datadir, 'langtags.json'))
sldrdir = os.getenv('LFFSLDR', '/var/lib/sldr/sldr')

silns = "{urn://www.sil.org/ldml/0.1}"

parser = argparse.ArgumentParser()
parser.add_argument('-s','--sldr',default=sldrdir,help='path to head of ldml files tree')
parser.add_argument('-r','--rules',default=rulesfile,help='fontrules.json')
parser.add_argument('-f','--fonts',default=familiesfile,help='families.json')
parser.add_argument('-l','--langs',default=ltfile,help='langtags.json')
parser.add_argument('-L','--ltag',action='append',default=[],help='language tag to test. Repeatable')
parser.add_argument('-q','--quiet',action='store_true',help="Only report real fails")
args = parser.parse_args()

lff = LFF(args.rules, args.fonts, ltags=args.langs)
jobs = iterate_files(args.sldr)
if len(args.ltag):
    ltags = [x.replace("-", "_") for x in args.ltag]
    jobs = [x for x in jobs if os.path.splitext(os.path.basename(x))[0] in ltags]

if not args.quiet:
    print(f"{len(jobs)} jobs to run")

for f in jobs:
    lt = os.path.splitext(os.path.basename(f))[0].replace("_", "-")
    res = lff.get(lt)
    if res is None:
        print(f"Failed to match {lt}")
        continue
    doc = et.parse(f)
    fname = None
    for e in doc.findall(f'./special/{silns}external-resources/{silns}font'):
        if 'default' in e.get('types', ""):
            fname = e.get('name')
            break
    if fname is not None:
        testname = fname.replace(" ", "").lower()
        if testname not in res['defaultfamily']:
            print(f"Failed to find {testname} in defaultfamily for {f}")
        elif testname not in res['families']:
            print(f"Failed {testname} missing from result families for {f}")
        elif not args.quiet:
            print(f"Passed {f}")

